syntax = "proto2";
option java_package = "com.bytedance.lark.pb";

import "entities.proto";

// Search: async (android + ios)

message SearchRequest {
    optional string query               = 1;
    optional int32 begin                = 2 [default = 0];
    optional int32 end                  = 3 [default = 5];
}

message SearchResponse {
    optional SearchGroupChatResponse group_chats = 1;
    optional SearchMessageResponse messages = 2;
    optional SearchChatterResponse chatters = 3;
}

// SearchChatter: async

message SearchChatterRequest {
    optional string query               = 1;
    optional int32 begin                = 2 [default = 0];
    optional int32 end                  = 3 [default = 5];
}

message SearchChatterResponse {
    optional Entity entity              = 1;
    optional bool has_more              = 2 [default = false];
    optional int32 total                = 3 [default = 0];
    repeated EntityPair pairs           = 4;
}

// SearchGroupChat: async

message SearchGroupChatRequest {
    optional string query               = 1;
    optional int32 begin                = 2 [default = 0];
    optional int32 end                  = 3 [default = 5];
}

message SearchGroupChatResponse {
    required Entity entity              = 1;
    optional int32 total                = 2;
    optional bool has_more              = 3;
    repeated string ordered_chat_ids    = 4;
}

// SearchMessage: async

message SearchMessageRequest {
    optional string query               = 1;
    optional int32 begin                = 2 [default = 0];
    optional int32 end                  = 3 [default = 5];
    optional string chat_id             = 4;
    optional string from_id             = 5;
    optional int64 start_time           = 6 [default = 0];
    optional int64 end_time             = 7 [default = 0];
}

message SearchMessageResponse {
    required Entity entity              = 1;
    optional int32 total                = 2;
    optional bool has_more              = 3;
    repeated string ordered_message_ids = 4;
}

enum EntityType {
    CHATTER                             = 1;
    CHAT                                = 2;
    MESSAGE                             = 3;
}

message EntityPair {
    required string entity_id           = 1;
    required EntityType type            = 2;

    // for chatter
    optional string department_id       = 3 [default = ''];
    optional string p2p_chat_id         = 4 [default = ''];
}

message Scene {
    enum Type {
        AT_USERS                        = 1;
        ADD_CHAT_CHATTERS               = 2;
        TRANSMIT_MESSAGES               = 3;

        SMART_SEARCH                    = 4;
        SEARCH_MESSAGES                 = 5;
        SEARCH_CHATS                    = 6;
        SEARCH_CHATTERS                 = 7;
    }

    optional Type type                  = 1;

    // AT_USERS/ADD_CHAT_CHATTERS/SEARCH_MESSAGES
    optional string chat_id             = 10 [default = ''];

    // SEARCH_MESSAGES
    optional string from_id             = 20 [default = ''];
    optional int64 start_time           = 21 [default = 0];
    optional int64 end_time             = 22 [default = 0];
}

// MultiSearch: async (pc)

message MultiSearchRequest {
    repeated SmartSearchRequest requests   = 1;
}

message MultiSearchResponse {
    repeated SmartSearchResponse responses = 1;
}

message SmartSearchRequest {
    optional string query               = 1;
    optional int32 begin                = 2 [default = 0];
    optional int32 end                  = 3 [default = 10];

    optional Scene scene                = 4;
}

message SmartSearchResponse {
    optional Entity entity              = 1;
    optional string search_id           = 2 [default = ''];
    optional bool has_more              = 3 [default = false];
    optional int32 total                = 4 [default = 0];
    repeated EntityPair pairs           = 5;
}

// SearchFeedback: async

message SearchFeedbackRequest {
    message Feedback {
        optional string entity_id       = 1 [default = ''];
        optional EntityType type        = 2;
        optional int32 offset           = 3 [default = 0];
    }
    optional string query               = 1 [default = ''];
    repeated Feedback feedbacks         = 2;
    optional Scene scene                = 3;
}

message SearchFeedbackResponse {
}

// GetSearchHistoryEntity: async

message GetSearchHistoryEntityRequest {
}

message GetSearchHistoryEntityResponse {
    required Entity entity              = 1;
    repeated EntityPair pairs           = 2;
}

// DeleteSearchHistoryEntity: async

message DeleteSearchHistoryEntityRequest {
    required string entity_id           = 1;
}

message DeleteSearchHistoryEntityResponse {
}