syntax = "proto2";
option java_package = "com.bytedance.lark.pb";

import "entities.proto";

// CreateQuasiMessage: sync + async

message CreateQuasiMessageRequest {
    required Message.Type   type                  = 1; // 消息类型
    required string         chat_id               = 2; // 消息发表在哪个会话中
    required QuasiContent   content               = 3;
    optional string         root_id               = 4  [default = ""]; // 该消息的根级 ID
    optional string         parent_id             = 5  [default = ""]; // 该消息的父级 ID
    optional bool           should_notify         = 6  [default = true]; // 是否通知
}

// SendMessage: async

message SendMessageRequest {
    required string cid                           = 1;
}

message SendMessageResponse {
}

// ResendMessage: async

message ResendMessageRequest {
    required string cid                           = 1;
}

message ResendMessageResponse {
}


// UpdateMessageMeRead: sync

message UpdateMessagesMeReadRequest {
    repeated string message_ids                   = 1;
    required string chat_id                       = 2;
    required int32 max_position                   = 3 [default = -1];
}

// GetChatMessageIds: async

message GetChatMessageIdsRequest {
    required string chat_id                       = 1;
    optional int32  start                         = 2  [default = 0];
    optional int32  end                           = 3  [default = 20];
}

message GetChatMessageIdsResponse {
    repeated string message_ids                   = 1;
}

// GetChatQuasiMessages: sync

message GetChatQuasiMessagesRequest {
    required string chat_id                       = 1;
}

message GetChatQuasiMessagesResponse {
    optional Entity entity                        = 2;
}

// DeleteMessage: async

message DeleteMessageRequest {
    required string id                             = 1;
}

message DeleteMessageResponse {
    required string message                        = 1; // 删除成功返回 'ok'; 否则，返回错误信息
}


// MGetMessages: sync + async

message MGetMessagesRequest {
   repeated string message_ids                     = 1;
}

message MGetMessagesResponse {
    required Entity entity                         = 1;
}

// GetMessagesByPositions: sync + async

message GetMessagesByPositionsRequest {
    required string chat_id                        = 1;
    repeated int32  positions                      = 2;
}

message GetMessagesByPositionsResponse {
    required Entity entity                         = 1;
}

// GetReplies: async

message GetRepliesRequest {
    required string root_id                        = 1;
}

message GetRepliesResponse {
    required string root_id                        = 1;
    repeated string child_ids                      = 2;
    required Entity entity                         = 3;
}

// GetMessagesReadState: async + sync

message GetMessagesReadStateRequest {
    repeated string message_ids = 1;
    optional bool need_users = 2 [default = false];
    // 如果 need_users 设置为 false，那么只会返回 unread_count，不会返回 read_user_ids 和 unread_user_ids
}

message GetMessagesReadStateResponse {
    message ReadState {
        repeated string read_user_ids = 1;
        repeated string unread_user_ids = 2;
        optional int32 unread_count = 3;
    }
    map<string, ReadState> read_states = 1;
}

// TransmitMessage: async

message TransmitMessageRequest {
    repeated string chat_ids                        = 1;
    required string message_id                      = 2;
}

message TransmitMessageResponse {
}

// GetUnreadAtMessage: async + sync

message GetUnreadAtMessagesRequest {
}

message GetUnreadAtMessagesResponse {
    required Entity entity                          = 1;
    repeated string ordered_message_ids             = 2;
}

// CopyMessages: async

message CopyMessagesRequest {
    repeated string message_ids                     = 1;
    required string to_chat_id                      = 2;
}

message CopyMessagesResponse {
    required Entity entity                          = 1;
}
