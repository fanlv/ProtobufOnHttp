syntax = "proto2";

option go_package="git.byted.org/ee/lark/im-protobuf/improto/messages";
option java_package="com.ss.android.lark.pb";

import "entities.proto";

// 消息service
service MessageGreeter {
    rpc send (PutMessageRequest) returns (PutMessageResponse) {}
    rpc transmit (PutTransmitMessageRequest) returns (PutTransmitMessageResponse) {}
    rpc get (PullMessagesByIdsRequest) returns (PullMessagesByIdsResponse) {}
    rpc getByPositions (PullMessagesByPositionsRequest) returns (PullMessagesByPositionsResponse) {}
    rpc delete (DeleteMessageRequest) returns (DeleteMessageResponse) {}
    rpc getReadState (PullMessageReadStateRequest) returns (PullMessageReadStateResponse) {}
    rpc getChatMessages (PullChatMessagesRequest) returns (PullChatMessagesResponse) {}
}

// 发表消息接口
message PutMessageRequest {
  optional Message.Type type = 1;  // 消息类型

  message Content {
    // 文本消息相关
    optional string text = 1;
    // 图片信息相关
    optional string image_key = 2;
    // 帖子相关
    optional string title = 3; // 帖子题目
    repeated string attachments = 4;  // 该帖子的附件列表
    optional bool is_notified = 5; // 该帖子是否开启通知
    optional string file_key = 6;
    // 语音消息相关
    optional string audio_key = 7;
    optional int32 audio_duration = 8; // 语音时长
  }
  optional Content content = 2;  // 消息内容
  optional string chat_id = 3;  // 消息发表在哪个会话中
  optional string root_id = 4;  // 该消息的根级 ID
  optional string parent_id = 5;  // 该消息的父级 ID
  optional string cid = 6; // 该消息的 cid
  optional bool is_notified = 7 [default = true]; // 是否通知
  optional bool send_to_chat = 8 [default = true]; // 是否发送到chat
}

message PutMessageResponse {
  required Message message = 1;
  map<string, int32> positions = 2;  // 消息在每个会话中的位置
}

// 修改消息
message PatchMessageRequest {
  message Content {
    optional string text = 1; // 文本消息相关
    optional string title = 2; // 帖子题目
  }
  required Content content = 1; // 修改的内容，全量替换旧内容
  required string id = 2; // 被修改消息的 id。
}

message PatchMessageResponse {
  required Message message = 1;
}

// 删除消息
message DeleteMessageRequest {
  required string id = 1; // 被删除消息的 id。
}

message DeleteMessageResponse {
  required string message = 1; // 删除成功返回 'ok'; 否则, 返回错误信息
}

// 获取消息接口
message PullChatMessagesRequest {
  required string chat_id = 1;
  optional int32 position = 2 [default = 0];
  optional int32 count = 3 [default = 20];
  enum Type {
    BEFORE = 1;
    AFTER = 2;
    LATEST = 3;
  }
  required Type type = 4 [default = LATEST];
}

message PullChatMessagesResponse {
  map<string, Message> messages = 1;
}

// ---- 语音消息 已播放相关-----
// 客户端播放语音后通知服务器已收听此语音
message PutReadAudioRequest {
  optional string chat_id = 1;
  optional string message_id = 2;
}

// 对应Request的回复
message PutReadAudioResponse {
  optional string chat_id = 1;
  optional string message_id = 2;
}

// 同一用户在一台设备上收听了某条语音，会推送该消息到该用户的其他设备，用于同步语音收听情况。
message PushReadAudioNotice {
  optional string chat_id = 1;
  optional string message_id = 2;
}

// 获取音频已播状态请求
message PullReadAudioStatusRequest {
  message Pair {
    optional string chat_id = 1;
    optional string message_id = 2;
  }
  repeated Pair pairs = 1;
}

// 获取音频已播状态返回
message PullReadAudioStatusResponse {
  message Pair {
    optional string chat_id = 1;
    optional string message_id = 2;
    optional bool is_read = 3; // true: 已播， false:未播
  }
  repeated Pair pairs = 1;
}

// ---- 已读未读 API 相关 -----
// [逐渐废弃] 命名不符合规范 读消息信息回传服务端
message PushReadMessagesNotice {
  optional string chat_id = 1;
  repeated string message_ids = 2;
  optional int32 position = 3 [default = -1];
}

// 读消息信息回传服务端 new 对应 PUT_READ_MESSAGES
message PutReadMessagesRequest {
  required string chat_id = 1;
  repeated string message_ids = 2;
  required int32 max_position = 3 [default = -1];
}

message PutReadMessagesResponse {
    optional int32 last_message_position = 1;
    optional int32 new_message_count = 2;
}

// [废弃] 更新会话中多条消息的已读状态
message PutMessageReadSateNotice {
   optional string chat_id = 1;
   repeated string message_ids = 2;
}

// [废弃] 更新会话中消息已读的最大位置
message PutChatReadPositionNotice {
  optional string chat_id = 1;
  optional int32 position = 2;
}

// [逐渐废弃] 命名不符合规范 服务端下发已读状态
message ReadCountNotification {
  message Pair {
    optional string chat_id = 1;
    optional string message_id = 2;
    optional int32 count = 3; // 未读消息的数目
  }
  repeated Pair pairs = 1;
}

// 服务端下发已读状态 new 对应 PUSH_MESSAGE_READ_COUNT
message PushMessageReadCountNotice {
  message Pair {
    optional string chat_id = 1;
    optional string message_id = 2;
    optional int32 count = 3; // [废弃]未读消息的数目
    repeated string chatter_ids = 4;
    optional int32 unread_count = 5;
    optional int32 read_count = 6;
  }
  repeated Pair pairs = 1;
}

// 查看某条消息的已读未读状态, 只有消息的发送者可以调用
message PullMessageReadStateRequest {
  message Pair {
    optional string chat_id = 1;
    optional string message_id = 2;
  }
  repeated Pair pairs = 1;
  optional bool need_users = 2 [default = false];
  // 如果 need_users 设置为 false，那么只会返回 unread_count，不会返回 read_user_ids 和 unread_user_ids
}

message PullMessageReadStateResponse {
  message ReadState {
    repeated string read_user_ids = 1;
    repeated string unread_user_ids = 2;
    optional int32 unread_count = 3;
    optional int32 read_count = 4;
  }
  map<string, ReadState> read_states = 1;
}

// 查看某条消息自己是否已读，[废弃]
message PullMessageIReadStateRequest {
  repeated string message_ids = 1;
}

message PullMessageIReadStateResponse {
  map<string, bool> read_status = 1;
}

// 查看某条消息自己是否已读，自动忽略不存在的 message_id
message PullMessageMeReadStateRequest {
  repeated string message_ids = 1;
}

message PullMessageMeReadStateResponse {
  map<string, bool> read_status = 1;
}

// 下发消息
message PushMessagesRequest {
  map<string, Message> messages = 1;
  map<string, Notice> notices = 2;
}

message PushMessagesResponse {
  repeated string message_ids = 1;
}

// 消息 mget
message PullMessagesByIdsRequest {
    repeated string message_ids = 1;
}

message PullMessagesByIdsResponse {
    map<string, Message> messages = 1;
}

// 根据位置拉取消息
message PullMessagesByPositionsRequest {
    required string chat_id = 1;
    repeated int32 positions = 2;
}

// map的key为position，value为消息实体，对于不合法的position将不出现在key中，也不返回消息实体
message PullMessagesByPositionsResponse {
    map<int32, Message> messages = 1;
}

message PutTransmitMessageRequest {
    repeated string chat_ids = 1; //转发到的chat_id
    required string message_id = 2; //要转发的message_id
    map<string, string> cids = 3; //chat_id 对应cid
}

message PutTransmitMessageResponse {
    map<string, Message> messages = 1;  // chat_id 对应message
}

message PullUnreadAtMessageIdsRequest{

}

message PullUnreadAtMessageIdsResponse {
  repeated string message_ids = 1;
}

message PutCopyMessagesRequest {
  repeated string message_ids = 1;
  required string to_chat_id = 2;
}

message PutCopyMessagesResponse {
  map<string, Message> messages = 1;
}
