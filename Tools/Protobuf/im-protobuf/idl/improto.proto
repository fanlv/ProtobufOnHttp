syntax = "proto2";

option go_package="git.byted.org/ee/lark/im-protobuf/improto/improto";
option java_package="com.ss.android.lark.pb";

service PacketGreeter {
    rpc send (Packet) returns (Packet) {}
    rpc pullPacketBySid (PullPacketsBySeqIdRequest) returns (PullPacketsBySeqIdResponse) {}
}

// IM 协议报文头中cmd
enum Command {
    option allow_alias = true;
    // 服务端发起的，向客户端的 push，客户端需要回应服务端 ACK，
    // 对应的，客户端发起的，向服务端的 request，服务端要回应客户端 ACK
    ACK = 1;
    CONNECT=2;
    DISCONNECT=3;
    PING=4;

    PUT_MESSAGE = 5; // 客户端发送消息
    PUSH_MESSAGES =6; // 服务器推送消息
    PULL_CHAT_MESSAGES = 7;  // 拉取一个会话的消息
    PULL_MESSAGES_BY_IDS = 8; // 拉取 message_ids 的消息
    DELETE_MESSAGE=9; //删除消息
    PUSH_READ_MESSAGES=10; //客户端通知服务端消息已读       [逐渐废弃 不符合规范的命名 由 PUT_READ_MESSAGES 替代]
    PUSH_MESSAGE_READ_STATE=11; //服务端通知客户端消息已读  [逐渐废弃 由 PUSH_MESSAGE_READ_COUNT 替代]
    PULL_MESSAGE_READ_STATE=12; //客户端查询消息哪些人已读、哪些人未读

    PUT_CHAT=13; //增加或者修改Chat信息
    PUT_CHAT_USER=14; //增加Chat成员 [逐渐废弃，由PUT_CHAT_CHATTER代替]
    DELETE_CHAT_USER=15; //删除Chat成员 [逐渐废弃，由DELETE_CHAT_CHATTER代替]
    PULL_CHATS=16; //拉取Chat列表
    PULL_CHAT_USERS=17; //拉取Chat成员   [逐渐废弃，由PULL_CHAT_CHATTERS替代]
    PUSH_CHATS=18;  //直接推送Chat的配置变化
    PUSH_CHAT_USERS=19; //推送Chat成员 [逐渐废弃, 由PUSH_CHAT_CHATTERS替代]

    PULL_USERS=20; //拉取用户信息
    PUSH_USERS=21; //推送用户改变的信息
    PUT_USER=22; //改变用户的信息

    PULL_MESSAGE_REPLIES=23; //拉取回复(帖子等)

    PULL_REACTIONS=24;  //拉取回应
    PUT_REACTION=25;  //增加回应
    DELETE_REACTION=26;  //取消回应
    PUSH_REACTIONS=27;  //推送回应

    PATCH_MESSAGE=28; //修改消息

    PUSH_CHAT_ARCHIVE=29; //归档会话

    SERVER_DISCONNET = 30; // 服务端主动断开连接

    PUT_IMAGE = 31; // 客户端上传图片
    SYNC_PACKETS = 32; // 从管子同步 packet
    PULL_RECENT_CHATS = 33; // 拉取最近会话列表
    PATCH_CHAT_NAME = 34; // 修改群名称

    PUT_MESSAGE_READ_STATE = 35; // 更新会话中多条消息的已读状态 [废弃]
    PUT_CHAT_READ_POSITION = 36; // 更新会话中消息已读的最大位置 [废弃]

    PULL_CONTACTS = 37; // 拉取联系人列表 [增加chatters字段]

    PULL_BOTS = 38; // 拉取机器人列表

    PUSH_CHAT_NEW_MESSAGE_COUNT = 39;    // 服务端推送 chat 的新消息数 [逐渐废弃]

    PUT_READ_MESSAGES = 40;       // 客户端通知服务端消息已读

    PUSH_MESSAGE_READ_COUNT = 41;       // 服务端推送消息已读到客户端

    PULL_CHATTERS = 42; // 拉取用户／机器人列表[命名不规范，逐渐废弃 由PULL_CHATTERS_BY_IDS替代]

    PULL_MESSAGES_BY_POSITIONS = 43;//根据positions拉取消息

    PULL_CHAT_CHATTERS=44; //拉取Chat成员

    DELETE_CHAT_CHATTER=45; //删除Chat成员

    PULL_CHATTERS_BY_IDS=46; //用id拉取聊天者

    PUT_CHAT_CHATTER=47; //增加Chat成员

    PUSH_CHAT_CHATTERS=48; //推送Chat聊天者

    PUT_P2P_CHATS = 50;     //一次性创建多个单聊

    PUT_TRANSMIT_MESSAGE = 51; //转发单条消息

    PUT_DING = 52; // 客户端发送DING

    PUT_CONFIRM_DING = 53; // 客户端确认DING

    PULL_RECEIVED_UNCONFIRMED_DING = 54; // 客户端拉取我收到未确认的的DING

    PULL_DING_CONFIRM_STATUS = 55; // 客户端拉取DING已确认/未确认详情

    PUSH_DING = 56; // 服务器推送DING消息

    PUSH_DING_CONFIRM = 57; // 服务器推送DING确认消息

    PULL_DING_STATUS = 58; // 客户端拉取DING消息与自己的关系: 我发的DING  DING我

    PULL_DINGS_CONFIRM_STATUS = 59; // 客户端拉取多个DING已确认/未确认详情

    PATCH_CHAT_SETTING = 60; //设置单个ChatSetting

    PUSH_CHAT_SETTING = 61;  //服务端下发单个ChatSetting

    PULL_CHAT_SETTINGS = 62; //拉取单个或多个ChatSetting

    PULL_ALL_CHAT_SETTINGS =63; //拉取全部ChatSetting

    PULL_CHATS_BY_IDS = 64; // 用 id 拉取会话

    PUT_READ_AUDIO = 65; // 发送已播状态到服务器

    PUSH_READ_AUDIO_NOTICE = 66; // 推送已播状态到用户其他客户端

    PULL_READ_AUDIO_STATUS = 67; // 拉取多个消息的已读状态

    PATCH_CHAT_DESCRIPTION = 68; // 修改群描述 [废弃]

    PATCH_CHAT_ICON = 69; // 修改群头像 [废弃]

    PUSH_CHATTER_RESIGN = 70; //推送员工离职消息

    PULL_CHATTERS_RESIGN_STATUS = 71; //根据 id 拉取 chatters 的离职状态

    PATCH_GROUP_CHAT = 72; // 修改群设置

    PULL_MESSAGE_I_READ_SRATE = 73;  // 检测某条消息自己是否已读 [typo] 废弃

    PULL_MESSAGE_ME_READ_STATE = 73;  // 检测某条消息自己是否已读

    PUSH_CHAT_MESSAGE_READ_STATE = 74;  // 推送 chat 中消息的已读状态

    PULL_THREAD = 90; //获取thread详情

    PATCH_THREAD_SETTING = 91; //编辑thread

    PUSH_THREAD_REPLY_COUNT =92; //推送thread回复数量

    PULL_THREAD_REPLIES=93; //拉取thread回复（根据是否参与者返回不同）

    PULL_THREAD_REACTIONS=94; //拉取thread reaction

    PUSH_CHATTERS=95; //推送 chatters 信息

    PULL_UNREAD_AT_MESSAGE_IDS = 96; //# 拉取用户 "未读@消息"

    PULL_DEPARTMENT_STRUCTURE = 80;

    PULL_FULL_DEPARTMENT_STRUCTURE = 81;

    PULL_GROUP_CHATS = 82;

    PULL_WANTED_AT_CHATTER = 75;

    PUT_COPY_MESSAGES = 76;

    PROCESS_MULTI_PACKETS = 77;

    // 1000-2000 FEED
    PULL_FEED_CARDS = 1000;
    PATCH_FEED_CARDS = 1001;
    PUSH_FEED_CARDS = 1002;

    // 3000 - 4000 email
    PUT_EMAIL = 3000;

    PULL_EMAIL_MEMBERS = 3001; // 拉取邮件收件人／发件人列表

    PATCH_EMAIL_MEMBERS = 3002; // 修改邮件收件人／发件人

    PUSH_EMAIL_MEMBERS = 3003;

    PUT_EASEMOB_GROUP_CHAT=10000; // temporary used for easemob channel

    SEARCH_USER = 11000; // 搜索用户
    SEARCH_MESSAGE = 11001; // 搜索消息
    SEARCH_GROUP_CHAT = 11002; // 搜索群会话
    SEARCH = 11003; // 搜索用户、消息、群会话
    SEARCH_CHATTER = 11004; // 搜索 chatter
    SMART_SEARCH = 11005; //智能搜索
    PUT_SEARCH_FEEDBACK = 11006; //上传点击实体
    PULL_SEARCH_HISTORY_ENTITIES = 11007; //拉取搜索历史
    DELETE_SEARCH_HISTORY_ENTITY = 11008; // 删除搜索历史

    PULL_PACKETS_BY_SIDS = 12001; // 批量获取指定 sid 的 packet

    PUT_MESSAGE_REMINDER = 20000; // 创建消息提醒
    PATCH_MESSAGE_REMINDER = 20001; // 修改消息提醒
    DELETE_MESSAGE_REMINDER = 20002; // 删除消息提醒
    PATCH_MESSAGE_REMINDER_CONFIRM = 20003; // 确定消息提醒
    PUSH_MESSAGE_REMINDER = 20004; // 在多个设备之间同步消息提醒的创建和变更
    PULL_MESSAGE_REMINDERS = 20005; // 拉取消息提醒
    PUSH_MESSAGE_REMINDER_ALERT = 20006; // 到消息提醒的指定时间发送远程的消息提醒
    DELETE_MESSAGE_REMINDER_ALERT = 20007; // 取消远程的消息提醒

    PUT_URGENT = 30000; //新建加急消息

    PUT_URGENT_ACK = 30001; //新建加急消息确认响应

    PUSH_URGENT = 30002; //推送加急消息

    PUSH_URGENT_ACK = 30003; //推送加急消息状态响应

    PULL_URGENT_WAITING_ACK = 30004; //拉取用户发出等待确认的加急消息

    PULL_URGENT_ACK_STATUS = 30005; //拉取用户发出加急消息状态接口

    CONFIRM_URGENT_ACK_BY_ID = 30006; //可以重复加急之后，就需要通过ack_id来确认加急

    PULL_URGENT_PHONES = 30007; //获取用于拨打加急电话的外显号码
}

// IM 协议报文头中payload_type
enum PayloadType {
    PB2 = 1;
}

message Packet {
    optional string sid = 1; // 服务端下发（push）消息时生成的唯一包id，保证递增
    required PayloadType payload_type = 2 [default = PB2];
    required Command cmd = 3;
    optional uint32 status=4 [default = 200]; // 仅ACK包有，表示响应状态码
    optional bytes payload = 5;
    optional string cid = 6; // 客户端生成的，通讯层面的，唯一包 id，用于在客户端收到服务端发送的响应包时，判断对应的请求包是哪个
}

message PullPacketsBySeqIdRequest {
  required string sid = 1 [default = ""];
  required uint32 count = 2 [default = 20];
}

message PullPacketsBySeqIdResponse {
  required bool has_more = 1 [default = false];
  repeated Packet packets = 2;
  optional int64 last_packet_create_time = 3; // 最后一个 packet 的创建时间
  optional string last_sid = 4; // 当 count = 0 时把最后一个 packet 的 sid 返回回去
}

message PullPacketsBySidsRequest {
    repeated string sids = 1;
}

message PullPacketsBySidsResponse {
    map<string, Packet> packets = 1;
}

message ProcessMultiPacketsRequest {
    repeated bytes packets = 1;
}

message ProcessMultiPacketsResponse {
    repeated bytes results = 1;
}