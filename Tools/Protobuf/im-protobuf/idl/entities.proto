syntax = "proto2";

option go_package="git.byted.org/ee/lark/im-protobuf/improto/entities";
option java_package="com.ss.android.lark.pb";

message Image {
  optional string key = 1;
  repeated string urls = 2;
  optional int32 width = 3;
  optional int32 height = 4;
}

message Urgent {
    enum Type {
        APP = 1;
        SMS = 2;
        PHONE = 3;
    }
    required string message_id = 1;
    optional Type type = 2;
    optional int64 send_time = 3;
    optional string from_id = 4;
}

message UrgentAck {
    optional string ack_id = 1;
    optional string message_id = 2;
    optional string to_id = 3;
    optional string urgent_id = 4;
    optional int64 send_time = 5;
    optional Urgent.Type type = 6;
    optional int64 status = 7;
    optional int64 confirm_time = 8;
    optional int64 phone_status = 9;
}

message ImageSet {
  optional string key = 1;
  optional Image origin = 2;
  optional Image thumbnail = 3;
}

enum ChatterType {
  //描述会话参与者的类型
  USER = 1;
  BOT = 2;
}

message Message {
  enum Type {
    // TEXT_IMAGE 类型已经删去 reseved 1;
    POST = 2;
    FILE = 3;
    TEXT = 4;
    IMAGE = 5;
    SYSTEM = 6;
    AUDIO = 7;
    EMAIL = 8;
  }
  enum FromType {
    USER = 1;
    BOT = 2;
  }

  enum Status {
    NORMAL = 1;
    DELETED = 2;
    MODIFIED = 3;
  }

  optional string id = 1;
  optional Type type = 2;
  optional string from_id = 3;
  optional int64 create_time = 4;
  optional bytes content = 5;
  optional Status status = 6;
  optional FromType from_type = 7;
  optional string root_id = 8;  // 本消息的根级祖先消息 id
  optional string parent_id = 9; // 本消息的父级消息 id
  optional string chat_id = 10;
  optional int64 last_modify_time = 11;
  optional string cid=12; // client id 客户端为每个消息生成的唯一 id，客户端用此尝试超时重发，服务端要对此去重
  optional int32 position=13;
  optional int64 update_time=14;
  optional bool is_notified=15; // 是否通知
  optional string reply_count=16; // 回复数
  optional string parent_source_message_id = 17;
  optional string root_source_message_id = 18;
  optional bool is_ding = 19; //该消息是否被DING过
  optional string thread_id =20; //thread_id
  optional bool send_to_chat = 21; //是否发送到chat
  optional bool is_truncated = 22 [default = false]; //长消息在推送时，会被截断。 True: 消息被截断。
}


message TextContent {
  optional string text = 1;
}

message ImageContent {
  optional ImageSet image = 1;
}

message FileContent {
  optional string key = 1;
  optional string name = 2;
  optional int64 size = 3;
  optional string mime = 4;
}

message AudioContent {
  optional string key = 1;
  optional int32 duration = 2; // 时长
  optional int64 size = 3;
}

message PostContent {
  optional string title = 1; // 帖子题目
  optional string text = 2;  // 帖子正文
  repeated string attachments = 3;  // 该帖子的附件列表
  optional bool is_notified = 4; // 该帖子是否开启通知
  optional string comment_count = 5; // 该帖子的评论数
}

message EmailContent {
  optional string title = 1;
  optional string text = 2;
  repeated string attachments = 3;
}

message SystemContent {
  enum Type {
    USER_MODIFY_GROUP_NAME = 1; //  {from_user} 将群名称"{old_group_name}"修改为"{group_name}"
    USER_MODIFY_GROUP_AVATAR = 2;   //  {from_user} 更新了群头像
    USER_MODIFY_GROUP_DESCRIPTION = 3;  //  {from_user} 更新了群描述: {new_description}
    USER_MODIFY_GROUP_SETTINGS = 4; //  {from_user} 更新了群设置
    USER_START_GROUP_AND_INVITE = 5;    //  {from_user} 发起群聊，并邀请 {to_chatters} 加入群聊
    SYSTEM_WELCOME_USER = 6;    //  欢迎 {to_chatters} 加入 {group_name}，新成员入群可查看所有历史消息
    USER_INVITE_OTHERS_JOIN = 7;    //  {from_user} 邀请 {to_chatters} 加入群聊，新成员入群可查看所有历史消息
    USER_QUIT_GROUP = 8;    //  {from_user} 退出群聊
    USER_REMOVE_OTHERS = 9; //  {from_user} 将 {to_chatters} 移出群聊
    USER_REMOVE_GROUP_DESCRIPTION = 10; //  {from_user} 清除了群描述
    USER_CHECK_OTHERS_TELEPHONE = 11; //  {from_user} 拨打（查看）了 {to_chatters} 的电话
    DERIVE_FROM_P2P_CHAT = 12; // 以下消息同步于 {user1} 与 {user2} 的单聊会话
  }

  required string message_template = 1;  // 模版，如 '{from_user} 邀请 {target_user} 加入群聊'
  map<string, string> contents = 2;  // 模版中的值，如 {from_user: '张三', target_user: '李四'}
  optional Type type = 3;   // 模版操作类型, 详情见enum Type
}

message Chat {
  enum Type {
    P2P = 1;
    GROUP = 2;
  }
  enum Status {
    NORMAL = 0;
    ARCHIVE = 1;
    DELETED = 2;
  }
  optional string id = 1;
  optional Type type = 2 [default = P2P];
  optional string last_message_id = 3;
  optional string name = 4;
  optional Image avatar = 5;
  optional string owner_id = 6;
  optional int32 new_message_count = 7;
  optional Status status = 8;
  optional int64 update_time = 9;
  optional string key = 10;
  optional string description = 11;
  optional int32 member_count = 12;
  optional bool is_department = 13;
  optional bool is_public = 14;
  optional int32 last_message_position = 15;
  optional int32 user_count = 16;
  optional string name_pinyin = 17;
  optional int64 create_time = 18;
  optional bool is_customer_service = 19;   // 客服群
  optional string name_py = 100; //加空格 无法直接取代name_pinyin 临时使用
}

message User {
    optional string id = 1;
    optional string name = 2;
    optional ImageSet avatar = 3;
    optional int32 status = 4;
    optional string avatar_url = 5;
    optional string name_pinyin = 6; // aborted
    optional int64 update_time = 7;
    // [废弃] optional string phone_number = 8;
    optional bool is_registered = 9;
    optional string name_py = 10;
}

message Bot {
    optional string id = 1;
    optional string name = 2;
    optional ImageSet avatar = 3;
    optional int32 status = 4;
    optional string avatar_url = 5;
    optional int64 update_time = 6;
    optional string creator_id = 7;
    optional string description = 8;
    optional string name_py = 10;
}

message Chatter {
    optional string id = 1;
    optional string name = 2;
    optional ImageSet avatar = 3;
    optional int32 status = 4;
    optional string avatar_url = 5;
    optional int64 update_time = 6;
    optional string name_pinyin = 7;  //aborted
    optional string creator_id = 8;
    optional ChatterType type = 9;
    // [废弃] optional string phone_number = 10;
    optional string description = 11;
    optional bool is_registered = 12;
    optional string name_py = 13;
}

message MessageReaction {
  message Reaction {
    optional string type = 1; // reaction 类型, 例如“thumb up”
    optional int32 count = 2;
    repeated string user_ids = 3; // 此reaction相关的用户 [逐渐废弃]
    repeated string chatter_ids = 4; // 此 reaction 相关的 chatter
  }
  optional string message_id = 1; // 消息Id
  repeated Reaction reactions = 2; // 消息的reaction信息
  optional int64 update_time = 3;
}

message MessageReminder {
  required string id = 1;
  required string message_id = 2;
  required int64 reminder_time = 3; // 提醒预定的发生时间
  required string chat_id = 4;
  required int32 reminder_position = 5 [default=0];
  required bool canceled = 6 [default=false];
  required int64 confirmed_time = 7; // 提醒被确认的时间
  required int32 message_position = 8 [default=0];
  optional int64 update_time = 9;
}

message ChatSetting {   // 目前设置项只有群消息提醒，以后可在这里扩充
  optional bool is_remind = 1 [default=true]; // 是否提醒，默认为提醒
  optional int64 update_time = 2;
}

message Department {
    required string id = 1;
    optional string name = 2;
    optional string parent_id = 3;
    optional string leader_id = 4;
    optional int32 member_count = 5;
    optional int32 status = 6;
    optional string name_pinyin = 7;
}

message Notice {
    optional bool should_notify = 1 [default=false];
    optional string title = 2;
    optional string content = 3;
    optional string summary = 4;
}

message EmailThread {
    optional string id = 1; // 第一封邮件的 id
    optional string owner_id = 2;
    optional string last_message_id = 3;
    optional int32 new_message_count = 4;
    optional int32 last_message_position = 5;
}
