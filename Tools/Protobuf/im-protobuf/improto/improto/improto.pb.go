// Code generated by protoc-gen-go.
// source: improto.proto
// DO NOT EDIT!

/*
Package improto is a generated protocol buffer package.

It is generated from these files:
	improto.proto

It has these top-level messages:
	Packet
	PullPacketsBySeqIdRequest
	PullPacketsBySeqIdResponse
	PullPacketsBySidsRequest
	PullPacketsBySidsResponse
	ProcessMultiPacketsRequest
	ProcessMultiPacketsResponse
*/
package improto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// IM 协议报文头中cmd
type Command int32

const (
	// 服务端发起的，向客户端的 push，客户端需要回应服务端 ACK，
	// 对应的，客户端发起的，向服务端的 request，服务端要回应客户端 ACK
	Command_ACK                            Command = 1
	Command_CONNECT                        Command = 2
	Command_DISCONNECT                     Command = 3
	Command_PING                           Command = 4
	Command_PUT_MESSAGE                    Command = 5
	Command_PUSH_MESSAGES                  Command = 6
	Command_PULL_CHAT_MESSAGES             Command = 7
	Command_PULL_MESSAGES_BY_IDS           Command = 8
	Command_DELETE_MESSAGE                 Command = 9
	Command_PUSH_READ_MESSAGES             Command = 10
	Command_PUSH_MESSAGE_READ_STATE        Command = 11
	Command_PULL_MESSAGE_READ_STATE        Command = 12
	Command_PUT_CHAT                       Command = 13
	Command_PUT_CHAT_USER                  Command = 14
	Command_DELETE_CHAT_USER               Command = 15
	Command_PULL_CHATS                     Command = 16
	Command_PULL_CHAT_USERS                Command = 17
	Command_PUSH_CHATS                     Command = 18
	Command_PUSH_CHAT_USERS                Command = 19
	Command_PULL_USERS                     Command = 20
	Command_PUSH_USERS                     Command = 21
	Command_PUT_USER                       Command = 22
	Command_PULL_MESSAGE_REPLIES           Command = 23
	Command_PULL_REACTIONS                 Command = 24
	Command_PUT_REACTION                   Command = 25
	Command_DELETE_REACTION                Command = 26
	Command_PUSH_REACTIONS                 Command = 27
	Command_PATCH_MESSAGE                  Command = 28
	Command_PUSH_CHAT_ARCHIVE              Command = 29
	Command_SERVER_DISCONNET               Command = 30
	Command_PUT_IMAGE                      Command = 31
	Command_SYNC_PACKETS                   Command = 32
	Command_PULL_RECENT_CHATS              Command = 33
	Command_PATCH_CHAT_NAME                Command = 34
	Command_PUT_MESSAGE_READ_STATE         Command = 35
	Command_PUT_CHAT_READ_POSITION         Command = 36
	Command_PULL_CONTACTS                  Command = 37
	Command_PULL_BOTS                      Command = 38
	Command_PUSH_CHAT_NEW_MESSAGE_COUNT    Command = 39
	Command_PUT_READ_MESSAGES              Command = 40
	Command_PUSH_MESSAGE_READ_COUNT        Command = 41
	Command_PULL_CHATTERS                  Command = 42
	Command_PULL_MESSAGES_BY_POSITIONS     Command = 43
	Command_PULL_CHAT_CHATTERS             Command = 44
	Command_DELETE_CHAT_CHATTER            Command = 45
	Command_PULL_CHATTERS_BY_IDS           Command = 46
	Command_PUT_CHAT_CHATTER               Command = 47
	Command_PUSH_CHAT_CHATTERS             Command = 48
	Command_PUT_P2P_CHATS                  Command = 50
	Command_PUT_TRANSMIT_MESSAGE           Command = 51
	Command_PUT_DING                       Command = 52
	Command_PUT_CONFIRM_DING               Command = 53
	Command_PULL_RECEIVED_UNCONFIRMED_DING Command = 54
	Command_PULL_DING_CONFIRM_STATUS       Command = 55
	Command_PUSH_DING                      Command = 56
	Command_PUSH_DING_CONFIRM              Command = 57
	Command_PULL_DING_STATUS               Command = 58
	Command_PULL_DINGS_CONFIRM_STATUS      Command = 59
	Command_PATCH_CHAT_SETTING             Command = 60
	Command_PUSH_CHAT_SETTING              Command = 61
	Command_PULL_CHAT_SETTINGS             Command = 62
	Command_PULL_ALL_CHAT_SETTINGS         Command = 63
	Command_PULL_CHATS_BY_IDS              Command = 64
	Command_PUT_READ_AUDIO                 Command = 65
	Command_PUSH_READ_AUDIO_NOTICE         Command = 66
	Command_PULL_READ_AUDIO_STATUS         Command = 67
	Command_PATCH_CHAT_DESCRIPTION         Command = 68
	Command_PATCH_CHAT_ICON                Command = 69
	Command_PUSH_CHATTER_RESIGN            Command = 70
	Command_PULL_CHATTERS_RESIGN_STATUS    Command = 71
	Command_PATCH_GROUP_CHAT               Command = 72
	Command_PULL_MESSAGE_I_READ_SRATE      Command = 73
	Command_PULL_MESSAGE_ME_READ_STATE     Command = 73
	Command_PUSH_CHAT_MESSAGE_READ_STATE   Command = 74
	Command_PULL_THREAD                    Command = 90
	Command_PATCH_THREAD_SETTING           Command = 91
	Command_PUSH_THREAD_REPLY_COUNT        Command = 92
	Command_PULL_THREAD_REPLIES            Command = 93
	Command_PULL_THREAD_REACTIONS          Command = 94
	Command_PUSH_CHATTERS                  Command = 95
	Command_PULL_UNREAD_AT_MESSAGE_IDS     Command = 96
	Command_PULL_DEPARTMENT_STRUCTURE      Command = 80
	Command_PULL_FULL_DEPARTMENT_STRUCTURE Command = 81
	Command_PULL_GROUP_CHATS               Command = 82
	Command_PULL_WANTED_AT_CHATTER         Command = 75
	Command_PUT_COPY_MESSAGES              Command = 76
	Command_PROCESS_MULTI_PACKETS          Command = 77
	// 1000-2000 FEED
	Command_PULL_FEED_CARDS  Command = 1000
	Command_PATCH_FEED_CARDS Command = 1001
	Command_PUSH_FEED_CARDS  Command = 1002
	// 3000 - 4000 email
	Command_PUT_EMAIL                      Command = 3000
	Command_PULL_EMAIL_MEMBERS             Command = 3001
	Command_PATCH_EMAIL_MEMBERS            Command = 3002
	Command_PUSH_EMAIL_MEMBERS             Command = 3003
	Command_PUT_EASEMOB_GROUP_CHAT         Command = 10000
	Command_SEARCH_USER                    Command = 11000
	Command_SEARCH_MESSAGE                 Command = 11001
	Command_SEARCH_GROUP_CHAT              Command = 11002
	Command_SEARCH                         Command = 11003
	Command_SEARCH_CHATTER                 Command = 11004
	Command_SMART_SEARCH                   Command = 11005
	Command_PUT_SEARCH_FEEDBACK            Command = 11006
	Command_PULL_SEARCH_HISTORY_ENTITIES   Command = 11007
	Command_DELETE_SEARCH_HISTORY_ENTITY   Command = 11008
	Command_PULL_PACKETS_BY_SIDS           Command = 12001
	Command_PUT_MESSAGE_REMINDER           Command = 20000
	Command_PATCH_MESSAGE_REMINDER         Command = 20001
	Command_DELETE_MESSAGE_REMINDER        Command = 20002
	Command_PATCH_MESSAGE_REMINDER_CONFIRM Command = 20003
	Command_PUSH_MESSAGE_REMINDER          Command = 20004
	Command_PULL_MESSAGE_REMINDERS         Command = 20005
	Command_PUSH_MESSAGE_REMINDER_ALERT    Command = 20006
	Command_DELETE_MESSAGE_REMINDER_ALERT  Command = 20007
	Command_PUT_URGENT                     Command = 30000
	Command_PUT_URGENT_ACK                 Command = 30001
	Command_PUSH_URGENT                    Command = 30002
	Command_PUSH_URGENT_ACK                Command = 30003
	Command_PULL_URGENT_WAITING_ACK        Command = 30004
	Command_PULL_URGENT_ACK_STATUS         Command = 30005
	Command_CONFIRM_URGENT_ACK_BY_ID       Command = 30006
	Command_PULL_URGENT_PHONES             Command = 30007
)

var Command_name = map[int32]string{
	1:  "ACK",
	2:  "CONNECT",
	3:  "DISCONNECT",
	4:  "PING",
	5:  "PUT_MESSAGE",
	6:  "PUSH_MESSAGES",
	7:  "PULL_CHAT_MESSAGES",
	8:  "PULL_MESSAGES_BY_IDS",
	9:  "DELETE_MESSAGE",
	10: "PUSH_READ_MESSAGES",
	11: "PUSH_MESSAGE_READ_STATE",
	12: "PULL_MESSAGE_READ_STATE",
	13: "PUT_CHAT",
	14: "PUT_CHAT_USER",
	15: "DELETE_CHAT_USER",
	16: "PULL_CHATS",
	17: "PULL_CHAT_USERS",
	18: "PUSH_CHATS",
	19: "PUSH_CHAT_USERS",
	20: "PULL_USERS",
	21: "PUSH_USERS",
	22: "PUT_USER",
	23: "PULL_MESSAGE_REPLIES",
	24: "PULL_REACTIONS",
	25: "PUT_REACTION",
	26: "DELETE_REACTION",
	27: "PUSH_REACTIONS",
	28: "PATCH_MESSAGE",
	29: "PUSH_CHAT_ARCHIVE",
	30: "SERVER_DISCONNET",
	31: "PUT_IMAGE",
	32: "SYNC_PACKETS",
	33: "PULL_RECENT_CHATS",
	34: "PATCH_CHAT_NAME",
	35: "PUT_MESSAGE_READ_STATE",
	36: "PUT_CHAT_READ_POSITION",
	37: "PULL_CONTACTS",
	38: "PULL_BOTS",
	39: "PUSH_CHAT_NEW_MESSAGE_COUNT",
	40: "PUT_READ_MESSAGES",
	41: "PUSH_MESSAGE_READ_COUNT",
	42: "PULL_CHATTERS",
	43: "PULL_MESSAGES_BY_POSITIONS",
	44: "PULL_CHAT_CHATTERS",
	45: "DELETE_CHAT_CHATTER",
	46: "PULL_CHATTERS_BY_IDS",
	47: "PUT_CHAT_CHATTER",
	48: "PUSH_CHAT_CHATTERS",
	50: "PUT_P2P_CHATS",
	51: "PUT_TRANSMIT_MESSAGE",
	52: "PUT_DING",
	53: "PUT_CONFIRM_DING",
	54: "PULL_RECEIVED_UNCONFIRMED_DING",
	55: "PULL_DING_CONFIRM_STATUS",
	56: "PUSH_DING",
	57: "PUSH_DING_CONFIRM",
	58: "PULL_DING_STATUS",
	59: "PULL_DINGS_CONFIRM_STATUS",
	60: "PATCH_CHAT_SETTING",
	61: "PUSH_CHAT_SETTING",
	62: "PULL_CHAT_SETTINGS",
	63: "PULL_ALL_CHAT_SETTINGS",
	64: "PULL_CHATS_BY_IDS",
	65: "PUT_READ_AUDIO",
	66: "PUSH_READ_AUDIO_NOTICE",
	67: "PULL_READ_AUDIO_STATUS",
	68: "PATCH_CHAT_DESCRIPTION",
	69: "PATCH_CHAT_ICON",
	70: "PUSH_CHATTER_RESIGN",
	71: "PULL_CHATTERS_RESIGN_STATUS",
	72: "PATCH_GROUP_CHAT",
	73: "PULL_MESSAGE_I_READ_SRATE",
	// Duplicate value: 73: "PULL_MESSAGE_ME_READ_STATE",
	74:    "PUSH_CHAT_MESSAGE_READ_STATE",
	90:    "PULL_THREAD",
	91:    "PATCH_THREAD_SETTING",
	92:    "PUSH_THREAD_REPLY_COUNT",
	93:    "PULL_THREAD_REPLIES",
	94:    "PULL_THREAD_REACTIONS",
	95:    "PUSH_CHATTERS",
	96:    "PULL_UNREAD_AT_MESSAGE_IDS",
	80:    "PULL_DEPARTMENT_STRUCTURE",
	81:    "PULL_FULL_DEPARTMENT_STRUCTURE",
	82:    "PULL_GROUP_CHATS",
	75:    "PULL_WANTED_AT_CHATTER",
	76:    "PUT_COPY_MESSAGES",
	77:    "PROCESS_MULTI_PACKETS",
	1000:  "PULL_FEED_CARDS",
	1001:  "PATCH_FEED_CARDS",
	1002:  "PUSH_FEED_CARDS",
	3000:  "PUT_EMAIL",
	3001:  "PULL_EMAIL_MEMBERS",
	3002:  "PATCH_EMAIL_MEMBERS",
	3003:  "PUSH_EMAIL_MEMBERS",
	10000: "PUT_EASEMOB_GROUP_CHAT",
	11000: "SEARCH_USER",
	11001: "SEARCH_MESSAGE",
	11002: "SEARCH_GROUP_CHAT",
	11003: "SEARCH",
	11004: "SEARCH_CHATTER",
	11005: "SMART_SEARCH",
	11006: "PUT_SEARCH_FEEDBACK",
	11007: "PULL_SEARCH_HISTORY_ENTITIES",
	11008: "DELETE_SEARCH_HISTORY_ENTITY",
	12001: "PULL_PACKETS_BY_SIDS",
	20000: "PUT_MESSAGE_REMINDER",
	20001: "PATCH_MESSAGE_REMINDER",
	20002: "DELETE_MESSAGE_REMINDER",
	20003: "PATCH_MESSAGE_REMINDER_CONFIRM",
	20004: "PUSH_MESSAGE_REMINDER",
	20005: "PULL_MESSAGE_REMINDERS",
	20006: "PUSH_MESSAGE_REMINDER_ALERT",
	20007: "DELETE_MESSAGE_REMINDER_ALERT",
	30000: "PUT_URGENT",
	30001: "PUT_URGENT_ACK",
	30002: "PUSH_URGENT",
	30003: "PUSH_URGENT_ACK",
	30004: "PULL_URGENT_WAITING_ACK",
	30005: "PULL_URGENT_ACK_STATUS",
	30006: "CONFIRM_URGENT_ACK_BY_ID",
	30007: "PULL_URGENT_PHONES",
}
var Command_value = map[string]int32{
	"ACK":                            1,
	"CONNECT":                        2,
	"DISCONNECT":                     3,
	"PING":                           4,
	"PUT_MESSAGE":                    5,
	"PUSH_MESSAGES":                  6,
	"PULL_CHAT_MESSAGES":             7,
	"PULL_MESSAGES_BY_IDS":           8,
	"DELETE_MESSAGE":                 9,
	"PUSH_READ_MESSAGES":             10,
	"PUSH_MESSAGE_READ_STATE":        11,
	"PULL_MESSAGE_READ_STATE":        12,
	"PUT_CHAT":                       13,
	"PUT_CHAT_USER":                  14,
	"DELETE_CHAT_USER":               15,
	"PULL_CHATS":                     16,
	"PULL_CHAT_USERS":                17,
	"PUSH_CHATS":                     18,
	"PUSH_CHAT_USERS":                19,
	"PULL_USERS":                     20,
	"PUSH_USERS":                     21,
	"PUT_USER":                       22,
	"PULL_MESSAGE_REPLIES":           23,
	"PULL_REACTIONS":                 24,
	"PUT_REACTION":                   25,
	"DELETE_REACTION":                26,
	"PUSH_REACTIONS":                 27,
	"PATCH_MESSAGE":                  28,
	"PUSH_CHAT_ARCHIVE":              29,
	"SERVER_DISCONNET":               30,
	"PUT_IMAGE":                      31,
	"SYNC_PACKETS":                   32,
	"PULL_RECENT_CHATS":              33,
	"PATCH_CHAT_NAME":                34,
	"PUT_MESSAGE_READ_STATE":         35,
	"PUT_CHAT_READ_POSITION":         36,
	"PULL_CONTACTS":                  37,
	"PULL_BOTS":                      38,
	"PUSH_CHAT_NEW_MESSAGE_COUNT":    39,
	"PUT_READ_MESSAGES":              40,
	"PUSH_MESSAGE_READ_COUNT":        41,
	"PULL_CHATTERS":                  42,
	"PULL_MESSAGES_BY_POSITIONS":     43,
	"PULL_CHAT_CHATTERS":             44,
	"DELETE_CHAT_CHATTER":            45,
	"PULL_CHATTERS_BY_IDS":           46,
	"PUT_CHAT_CHATTER":               47,
	"PUSH_CHAT_CHATTERS":             48,
	"PUT_P2P_CHATS":                  50,
	"PUT_TRANSMIT_MESSAGE":           51,
	"PUT_DING":                       52,
	"PUT_CONFIRM_DING":               53,
	"PULL_RECEIVED_UNCONFIRMED_DING": 54,
	"PULL_DING_CONFIRM_STATUS":       55,
	"PUSH_DING":                      56,
	"PUSH_DING_CONFIRM":              57,
	"PULL_DING_STATUS":               58,
	"PULL_DINGS_CONFIRM_STATUS":      59,
	"PATCH_CHAT_SETTING":             60,
	"PUSH_CHAT_SETTING":              61,
	"PULL_CHAT_SETTINGS":             62,
	"PULL_ALL_CHAT_SETTINGS":         63,
	"PULL_CHATS_BY_IDS":              64,
	"PUT_READ_AUDIO":                 65,
	"PUSH_READ_AUDIO_NOTICE":         66,
	"PULL_READ_AUDIO_STATUS":         67,
	"PATCH_CHAT_DESCRIPTION":         68,
	"PATCH_CHAT_ICON":                69,
	"PUSH_CHATTER_RESIGN":            70,
	"PULL_CHATTERS_RESIGN_STATUS":    71,
	"PATCH_GROUP_CHAT":               72,
	"PULL_MESSAGE_I_READ_SRATE":      73,
	"PULL_MESSAGE_ME_READ_STATE":     73,
	"PUSH_CHAT_MESSAGE_READ_STATE":   74,
	"PULL_THREAD":                    90,
	"PATCH_THREAD_SETTING":           91,
	"PUSH_THREAD_REPLY_COUNT":        92,
	"PULL_THREAD_REPLIES":            93,
	"PULL_THREAD_REACTIONS":          94,
	"PUSH_CHATTERS":                  95,
	"PULL_UNREAD_AT_MESSAGE_IDS":     96,
	"PULL_DEPARTMENT_STRUCTURE":      80,
	"PULL_FULL_DEPARTMENT_STRUCTURE": 81,
	"PULL_GROUP_CHATS":               82,
	"PULL_WANTED_AT_CHATTER":         75,
	"PUT_COPY_MESSAGES":              76,
	"PROCESS_MULTI_PACKETS":          77,
	"PULL_FEED_CARDS":                1000,
	"PATCH_FEED_CARDS":               1001,
	"PUSH_FEED_CARDS":                1002,
	"PUT_EMAIL":                      3000,
	"PULL_EMAIL_MEMBERS":             3001,
	"PATCH_EMAIL_MEMBERS":            3002,
	"PUSH_EMAIL_MEMBERS":             3003,
	"PUT_EASEMOB_GROUP_CHAT":         10000,
	"SEARCH_USER":                    11000,
	"SEARCH_MESSAGE":                 11001,
	"SEARCH_GROUP_CHAT":              11002,
	"SEARCH":                         11003,
	"SEARCH_CHATTER":                 11004,
	"SMART_SEARCH":                   11005,
	"PUT_SEARCH_FEEDBACK":            11006,
	"PULL_SEARCH_HISTORY_ENTITIES":   11007,
	"DELETE_SEARCH_HISTORY_ENTITY":   11008,
	"PULL_PACKETS_BY_SIDS":           12001,
	"PUT_MESSAGE_REMINDER":           20000,
	"PATCH_MESSAGE_REMINDER":         20001,
	"DELETE_MESSAGE_REMINDER":        20002,
	"PATCH_MESSAGE_REMINDER_CONFIRM": 20003,
	"PUSH_MESSAGE_REMINDER":          20004,
	"PULL_MESSAGE_REMINDERS":         20005,
	"PUSH_MESSAGE_REMINDER_ALERT":    20006,
	"DELETE_MESSAGE_REMINDER_ALERT":  20007,
	"PUT_URGENT":                     30000,
	"PUT_URGENT_ACK":                 30001,
	"PUSH_URGENT":                    30002,
	"PUSH_URGENT_ACK":                30003,
	"PULL_URGENT_WAITING_ACK":        30004,
	"PULL_URGENT_ACK_STATUS":         30005,
	"CONFIRM_URGENT_ACK_BY_ID":       30006,
	"PULL_URGENT_PHONES":             30007,
}

func (x Command) Enum() *Command {
	p := new(Command)
	*p = x
	return p
}
func (x Command) String() string {
	return proto.EnumName(Command_name, int32(x))
}
func (x *Command) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Command_value, data, "Command")
	if err != nil {
		return err
	}
	*x = Command(value)
	return nil
}
func (Command) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// IM 协议报文头中payload_type
type PayloadType int32

const (
	PayloadType_PB2 PayloadType = 1
)

var PayloadType_name = map[int32]string{
	1: "PB2",
}
var PayloadType_value = map[string]int32{
	"PB2": 1,
}

func (x PayloadType) Enum() *PayloadType {
	p := new(PayloadType)
	*p = x
	return p
}
func (x PayloadType) String() string {
	return proto.EnumName(PayloadType_name, int32(x))
}
func (x *PayloadType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PayloadType_value, data, "PayloadType")
	if err != nil {
		return err
	}
	*x = PayloadType(value)
	return nil
}
func (PayloadType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Packet struct {
	Sid              *string      `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
	PayloadType      *PayloadType `protobuf:"varint,2,req,name=payload_type,json=payloadType,enum=PayloadType,def=1" json:"payload_type,omitempty"`
	Cmd              *Command     `protobuf:"varint,3,req,name=cmd,enum=Command" json:"cmd,omitempty"`
	Status           *uint32      `protobuf:"varint,4,opt,name=status,def=200" json:"status,omitempty"`
	Payload          []byte       `protobuf:"bytes,5,opt,name=payload" json:"payload,omitempty"`
	Cid              *string      `protobuf:"bytes,6,opt,name=cid" json:"cid,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Packet) Reset()                    { *m = Packet{} }
func (m *Packet) String() string            { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()               {}
func (*Packet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_Packet_PayloadType PayloadType = PayloadType_PB2
const Default_Packet_Status uint32 = 200

func (m *Packet) GetSid() string {
	if m != nil && m.Sid != nil {
		return *m.Sid
	}
	return ""
}

func (m *Packet) GetPayloadType() PayloadType {
	if m != nil && m.PayloadType != nil {
		return *m.PayloadType
	}
	return Default_Packet_PayloadType
}

func (m *Packet) GetCmd() Command {
	if m != nil && m.Cmd != nil {
		return *m.Cmd
	}
	return Command_ACK
}

func (m *Packet) GetStatus() uint32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_Packet_Status
}

func (m *Packet) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Packet) GetCid() string {
	if m != nil && m.Cid != nil {
		return *m.Cid
	}
	return ""
}

type PullPacketsBySeqIdRequest struct {
	Sid              *string `protobuf:"bytes,1,req,name=sid,def=" json:"sid,omitempty"`
	Count            *uint32 `protobuf:"varint,2,req,name=count,def=20" json:"count,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PullPacketsBySeqIdRequest) Reset()                    { *m = PullPacketsBySeqIdRequest{} }
func (m *PullPacketsBySeqIdRequest) String() string            { return proto.CompactTextString(m) }
func (*PullPacketsBySeqIdRequest) ProtoMessage()               {}
func (*PullPacketsBySeqIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

const Default_PullPacketsBySeqIdRequest_Count uint32 = 20

func (m *PullPacketsBySeqIdRequest) GetSid() string {
	if m != nil && m.Sid != nil {
		return *m.Sid
	}
	return ""
}

func (m *PullPacketsBySeqIdRequest) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return Default_PullPacketsBySeqIdRequest_Count
}

type PullPacketsBySeqIdResponse struct {
	HasMore              *bool     `protobuf:"varint,1,req,name=has_more,json=hasMore,def=0" json:"has_more,omitempty"`
	Packets              []*Packet `protobuf:"bytes,2,rep,name=packets" json:"packets,omitempty"`
	LastPacketCreateTime *int64    `protobuf:"varint,3,opt,name=last_packet_create_time,json=lastPacketCreateTime" json:"last_packet_create_time,omitempty"`
	LastSid              *string   `protobuf:"bytes,4,opt,name=last_sid,json=lastSid" json:"last_sid,omitempty"`
	XXX_unrecognized     []byte    `json:"-"`
}

func (m *PullPacketsBySeqIdResponse) Reset()                    { *m = PullPacketsBySeqIdResponse{} }
func (m *PullPacketsBySeqIdResponse) String() string            { return proto.CompactTextString(m) }
func (*PullPacketsBySeqIdResponse) ProtoMessage()               {}
func (*PullPacketsBySeqIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

const Default_PullPacketsBySeqIdResponse_HasMore bool = false

func (m *PullPacketsBySeqIdResponse) GetHasMore() bool {
	if m != nil && m.HasMore != nil {
		return *m.HasMore
	}
	return Default_PullPacketsBySeqIdResponse_HasMore
}

func (m *PullPacketsBySeqIdResponse) GetPackets() []*Packet {
	if m != nil {
		return m.Packets
	}
	return nil
}

func (m *PullPacketsBySeqIdResponse) GetLastPacketCreateTime() int64 {
	if m != nil && m.LastPacketCreateTime != nil {
		return *m.LastPacketCreateTime
	}
	return 0
}

func (m *PullPacketsBySeqIdResponse) GetLastSid() string {
	if m != nil && m.LastSid != nil {
		return *m.LastSid
	}
	return ""
}

type PullPacketsBySidsRequest struct {
	Sids             []string `protobuf:"bytes,1,rep,name=sids" json:"sids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PullPacketsBySidsRequest) Reset()                    { *m = PullPacketsBySidsRequest{} }
func (m *PullPacketsBySidsRequest) String() string            { return proto.CompactTextString(m) }
func (*PullPacketsBySidsRequest) ProtoMessage()               {}
func (*PullPacketsBySidsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PullPacketsBySidsRequest) GetSids() []string {
	if m != nil {
		return m.Sids
	}
	return nil
}

type PullPacketsBySidsResponse struct {
	Packets          map[string]*Packet `protobuf:"bytes,1,rep,name=packets" json:"packets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *PullPacketsBySidsResponse) Reset()                    { *m = PullPacketsBySidsResponse{} }
func (m *PullPacketsBySidsResponse) String() string            { return proto.CompactTextString(m) }
func (*PullPacketsBySidsResponse) ProtoMessage()               {}
func (*PullPacketsBySidsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PullPacketsBySidsResponse) GetPackets() map[string]*Packet {
	if m != nil {
		return m.Packets
	}
	return nil
}

type ProcessMultiPacketsRequest struct {
	Packets          [][]byte `protobuf:"bytes,1,rep,name=packets" json:"packets,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ProcessMultiPacketsRequest) Reset()                    { *m = ProcessMultiPacketsRequest{} }
func (m *ProcessMultiPacketsRequest) String() string            { return proto.CompactTextString(m) }
func (*ProcessMultiPacketsRequest) ProtoMessage()               {}
func (*ProcessMultiPacketsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ProcessMultiPacketsRequest) GetPackets() [][]byte {
	if m != nil {
		return m.Packets
	}
	return nil
}

type ProcessMultiPacketsResponse struct {
	Results          [][]byte `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ProcessMultiPacketsResponse) Reset()                    { *m = ProcessMultiPacketsResponse{} }
func (m *ProcessMultiPacketsResponse) String() string            { return proto.CompactTextString(m) }
func (*ProcessMultiPacketsResponse) ProtoMessage()               {}
func (*ProcessMultiPacketsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ProcessMultiPacketsResponse) GetResults() [][]byte {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*Packet)(nil), "Packet")
	proto.RegisterType((*PullPacketsBySeqIdRequest)(nil), "PullPacketsBySeqIdRequest")
	proto.RegisterType((*PullPacketsBySeqIdResponse)(nil), "PullPacketsBySeqIdResponse")
	proto.RegisterType((*PullPacketsBySidsRequest)(nil), "PullPacketsBySidsRequest")
	proto.RegisterType((*PullPacketsBySidsResponse)(nil), "PullPacketsBySidsResponse")
	proto.RegisterType((*ProcessMultiPacketsRequest)(nil), "ProcessMultiPacketsRequest")
	proto.RegisterType((*ProcessMultiPacketsResponse)(nil), "ProcessMultiPacketsResponse")
	proto.RegisterEnum("Command", Command_name, Command_value)
	proto.RegisterEnum("PayloadType", PayloadType_name, PayloadType_value)
}

func init() { proto.RegisterFile("improto.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1790 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x57, 0xd9, 0x76, 0x23, 0x47,
	0x19, 0x9e, 0xb6, 0x6c, 0xcb, 0x2e, 0xcb, 0x9e, 0x72, 0x79, 0x51, 0x5b, 0x1e, 0x3b, 0x1a, 0x25,
	0x10, 0x31, 0x10, 0x79, 0x10, 0xd9, 0x30, 0x6b, 0xab, 0x55, 0x63, 0x35, 0x23, 0xb5, 0x9a, 0xaa,
	0xea, 0x99, 0xe3, 0x40, 0x68, 0x34, 0x56, 0x27, 0xd1, 0x19, 0xc9, 0x72, 0xd4, 0x32, 0xe7, 0xe8,
	0x8e, 0x47, 0xe0, 0x01, 0x7c, 0x01, 0x84, 0xe5, 0x16, 0x08, 0x61, 0x7d, 0x14, 0xae, 0xb8, 0x03,
	0x3d, 0x01, 0x3b, 0x39, 0xb5, 0xb6, 0xe4, 0xb1, 0x6f, 0x6c, 0xd5, 0xbf, 0x2f, 0xdf, 0xff, 0x77,
	0x15, 0x58, 0xef, 0x0d, 0x2e, 0x46, 0xc3, 0xf1, 0xb0, 0x22, 0xfe, 0x96, 0x3e, 0xb1, 0xc0, 0x72,
	0xd0, 0x39, 0x7b, 0x1e, 0x8f, 0x11, 0x04, 0x99, 0xa4, 0xd7, 0xb5, 0xad, 0xa2, 0x55, 0x5e, 0x25,
	0xfc, 0x27, 0x7a, 0x1d, 0xe4, 0x2e, 0x3a, 0x93, 0xfe, 0xb0, 0xd3, 0x8d, 0xc6, 0x93, 0x8b, 0xd8,
	0x5e, 0x28, 0x2e, 0x94, 0x37, 0xaa, 0xb9, 0x4a, 0x20, 0x89, 0x6c, 0x72, 0x11, 0x1f, 0x67, 0x82,
	0x5a, 0x95, 0xac, 0x5d, 0xa4, 0x14, 0x54, 0x00, 0x99, 0xb3, 0x41, 0xd7, 0xce, 0x08, 0xe1, 0x95,
	0x8a, 0x3b, 0x1c, 0x0c, 0x3a, 0xe7, 0x5d, 0xc2, 0x89, 0x68, 0x1f, 0x2c, 0x27, 0xe3, 0xce, 0xf8,
	0x32, 0xb1, 0x17, 0x8b, 0x56, 0x79, 0xfd, 0x38, 0x53, 0x7d, 0xf8, 0x90, 0x28, 0x12, 0xb2, 0x41,
	0x56, 0xd9, 0xb1, 0x97, 0x8a, 0x56, 0x39, 0x47, 0xf4, 0x91, 0x87, 0x76, 0xd6, 0xeb, 0xda, 0xcb,
	0x32, 0xb4, 0xb3, 0x5e, 0xb7, 0xe4, 0x81, 0xbd, 0xe0, 0xb2, 0xdf, 0x97, 0xa1, 0x27, 0xb5, 0x09,
	0x8d, 0x3f, 0xf4, 0xba, 0x24, 0xfe, 0xf0, 0x32, 0x4e, 0xc6, 0x08, 0xe9, 0x4c, 0x16, 0xca, 0xab,
	0xc7, 0x77, 0x64, 0x2e, 0x36, 0x58, 0x3a, 0x1b, 0x5e, 0x9e, 0x8f, 0x45, 0x12, 0xeb, 0xc7, 0x0b,
	0xd5, 0x87, 0x44, 0x12, 0x4a, 0x1f, 0x5b, 0xa0, 0x70, 0x93, 0xad, 0xe4, 0x62, 0x78, 0x9e, 0xc4,
	0xa8, 0x08, 0x56, 0x3e, 0xe8, 0x24, 0xd1, 0x60, 0x38, 0x8a, 0x85, 0xc5, 0x95, 0xe3, 0xa5, 0xf7,
	0x3a, 0xfd, 0x24, 0x26, 0xd9, 0x0f, 0x3a, 0x49, 0x6b, 0x38, 0x8a, 0xd1, 0x7d, 0x1e, 0xb7, 0xd0,
	0xb5, 0x17, 0x8a, 0x99, 0xf2, 0x5a, 0x35, 0x5b, 0x91, 0xb6, 0x88, 0xa6, 0xa3, 0x37, 0x40, 0xbe,
	0xdf, 0x49, 0xc6, 0x91, 0x3c, 0x47, 0x67, 0xa3, 0xb8, 0x33, 0x8e, 0xa3, 0x71, 0x6f, 0x10, 0xdb,
	0x99, 0xa2, 0x55, 0xce, 0x90, 0x6d, 0xce, 0x96, 0x5a, 0xae, 0x60, 0xb2, 0xde, 0x20, 0x46, 0x7b,
	0x60, 0x45, 0xa8, 0xf1, 0x6c, 0x16, 0x45, 0xf2, 0x59, 0x7e, 0xa6, 0xbd, 0x6e, 0xa9, 0x02, 0xec,
	0xf9, 0xa0, 0x7b, 0xdd, 0x24, 0xcd, 0x7f, 0x31, 0xe9, 0x75, 0x13, 0xdb, 0x2a, 0x66, 0xca, 0xab,
	0x44, 0xfc, 0x2e, 0x7d, 0x64, 0x5d, 0xaf, 0x98, 0x50, 0x50, 0x49, 0x3a, 0x69, 0x0a, 0x96, 0x48,
	0xe1, 0xd5, 0xca, 0xad, 0xc2, 0x2a, 0xb9, 0x04, 0x9f, 0x8f, 0x47, 0x13, 0x93, 0x62, 0xc1, 0x05,
	0xb9, 0x59, 0x06, 0xef, 0xd9, 0xf3, 0x78, 0xa2, 0xe1, 0xf4, 0x3c, 0x9e, 0xa0, 0x03, 0xb0, 0xf4,
	0x83, 0x4e, 0xff, 0x92, 0xe3, 0xc8, 0x9a, 0xad, 0x92, 0xa4, 0x1e, 0x2f, 0xbc, 0x6d, 0x95, 0xde,
	0x04, 0x85, 0x60, 0x34, 0x3c, 0x8b, 0x93, 0xa4, 0x75, 0xd9, 0x1f, 0xf7, 0x94, 0x41, 0x9d, 0x97,
	0x3d, 0x1f, 0x65, 0xce, 0x38, 0x2f, 0xbd, 0x05, 0xf6, 0x6f, 0xd4, 0x53, 0xe9, 0xd9, 0x20, 0x3b,
	0x8a, 0x93, 0xcb, 0x7e, 0xaa, 0xa8, 0x8e, 0x0f, 0xfe, 0xb2, 0x0b, 0xb2, 0x0a, 0xa1, 0x28, 0x0b,
	0x32, 0x8e, 0xfb, 0x18, 0x5a, 0x68, 0x0d, 0x64, 0xdd, 0xb6, 0xef, 0x63, 0x97, 0xc1, 0x05, 0xb4,
	0x01, 0x40, 0xdd, 0xa3, 0xfa, 0x9c, 0x41, 0x2b, 0x60, 0x31, 0xf0, 0xfc, 0x13, 0xb8, 0x88, 0xee,
	0x82, 0xb5, 0x20, 0x64, 0x51, 0x0b, 0x53, 0xea, 0x9c, 0x60, 0xb8, 0x84, 0x36, 0xc1, 0x7a, 0x10,
	0xd2, 0x86, 0xa6, 0x50, 0xb8, 0x8c, 0x76, 0x01, 0x0a, 0xc2, 0x66, 0x33, 0x72, 0x1b, 0x0e, 0x4b,
	0xe9, 0x59, 0x64, 0x83, 0x6d, 0x41, 0xd7, 0xa4, 0xa8, 0x76, 0x1a, 0x79, 0x75, 0x0a, 0x57, 0x10,
	0x02, 0x1b, 0x75, 0xdc, 0xc4, 0x0c, 0x1b, 0xc3, 0xab, 0xd2, 0x0a, 0x6d, 0x44, 0x04, 0x3b, 0xf5,
	0xd4, 0x0a, 0x40, 0xfb, 0x20, 0x3f, 0xeb, 0x50, 0xf2, 0x29, 0x73, 0x18, 0x86, 0x6b, 0x92, 0x99,
	0xba, 0x98, 0x65, 0xe6, 0x50, 0x0e, 0xac, 0xf0, 0xd8, 0x79, 0x58, 0x70, 0x5d, 0x06, 0x2e, 0x4f,
	0x51, 0x48, 0x31, 0x81, 0x1b, 0x68, 0x1b, 0x40, 0x15, 0x46, 0x4a, 0xbd, 0xcb, 0x8b, 0x61, 0xd2,
	0xa1, 0x10, 0xa2, 0x2d, 0x70, 0x37, 0x4d, 0x8f, 0xcb, 0x50, 0xb8, 0x29, 0x85, 0x68, 0x43, 0x09,
	0x21, 0x29, 0xa4, 0xce, 0x4a, 0x68, 0xcb, 0x58, 0x92, 0xe7, 0x6d, 0xa3, 0x24, 0xcf, 0x3b, 0x3a,
	0x40, 0xe1, 0x77, 0xf7, 0x7a, 0xb9, 0x22, 0x82, 0x83, 0xa6, 0x87, 0x29, 0xcc, 0xf3, 0x72, 0x09,
	0x0e, 0xc1, 0x8e, 0xcb, 0xbc, 0xb6, 0x4f, 0xa1, 0x8d, 0x20, 0xc8, 0x71, 0x5d, 0x4d, 0x82, 0x7b,
	0x3c, 0x04, 0x95, 0x8d, 0x21, 0x16, 0xa4, 0xaa, 0xac, 0xaa, 0x52, 0xdd, 0x17, 0x95, 0x70, 0x98,
	0x6b, 0x4a, 0x0a, 0xef, 0xa1, 0x1d, 0xb0, 0x99, 0x86, 0xef, 0x10, 0xb7, 0xe1, 0x3d, 0xc1, 0xf0,
	0x80, 0x17, 0x88, 0x62, 0xf2, 0x04, 0x93, 0x48, 0xc3, 0x83, 0xc1, 0x43, 0xb4, 0x0e, 0x56, 0xb9,
	0x6b, 0xaf, 0xc5, 0x75, 0x5f, 0xe2, 0x91, 0xd0, 0x53, 0xdf, 0x8d, 0x02, 0xc7, 0x7d, 0x8c, 0x19,
	0x85, 0x45, 0x69, 0x4d, 0xc4, 0xeb, 0x62, 0x9f, 0xa9, 0x1a, 0xdd, 0x17, 0x35, 0x12, 0x7e, 0x85,
	0x17, 0xdf, 0x69, 0x61, 0x58, 0x42, 0x05, 0xb0, 0x3b, 0x03, 0xb0, 0xd9, 0x06, 0xbe, 0xac, 0x79,
	0x42, 0x5c, 0x30, 0x82, 0x36, 0xf5, 0x44, 0x62, 0xaf, 0xc8, 0x76, 0xf2, 0xae, 0xb4, 0x7d, 0xe6,
	0xb8, 0x8c, 0xc2, 0xcf, 0xc8, 0xb8, 0x9a, 0xcd, 0xa8, 0xd6, 0x66, 0x14, 0x7e, 0x16, 0xbd, 0x04,
	0xf6, 0xd3, 0x9c, 0x7c, 0xfc, 0xd4, 0xf8, 0x70, 0xdb, 0xa1, 0xcf, 0xe0, 0xab, 0x32, 0x4c, 0x76,
	0x0d, 0x70, 0xe5, 0x9b, 0x01, 0x27, 0x75, 0x3e, 0x97, 0xba, 0x6d, 0x38, 0x8c, 0xf1, 0x2e, 0x3e,
	0x40, 0x87, 0xa0, 0xf0, 0x02, 0xcc, 0x75, 0xa0, 0x14, 0x7e, 0x7e, 0x7e, 0x3c, 0x8c, 0xde, 0x17,
	0x50, 0x1e, 0x6c, 0xcd, 0xa2, 0x4f, 0x71, 0xe0, 0x6b, 0x06, 0x08, 0x5a, 0x56, 0xcf, 0x4d, 0x85,
	0xf7, 0xc3, 0x14, 0x44, 0xcb, 0x1f, 0x99, 0xc9, 0x99, 0x77, 0xf0, 0x50, 0x23, 0x3e, 0xa8, 0x06,
	0xaa, 0x05, 0x55, 0x69, 0x9a, 0x45, 0x8c, 0x38, 0x3e, 0x6d, 0x79, 0xe9, 0x5c, 0x7f, 0x49, 0x63,
	0xb1, 0xce, 0xc7, 0xfe, 0x75, 0xe3, 0xa8, 0xed, 0x3f, 0xf2, 0x48, 0x4b, 0x52, 0xdf, 0x40, 0x25,
	0x70, 0x68, 0xfa, 0xea, 0x3d, 0xc1, 0xf5, 0x28, 0xf4, 0x95, 0x04, 0xae, 0x4b, 0x99, 0x37, 0xd1,
	0x3d, 0x60, 0x0b, 0x19, 0x7e, 0x34, 0xfa, 0xbc, 0xa1, 0x21, 0x85, 0x6f, 0xc9, 0x16, 0xd1, 0x86,
	0x14, 0x7e, 0xdb, 0xc0, 0x6e, 0x56, 0x18, 0x7e, 0x59, 0x7a, 0xd7, 0x36, 0x94, 0xee, 0x31, 0x3a,
	0x00, 0x7b, 0x86, 0x4a, 0xaf, 0x9b, 0xfe, 0x8a, 0xa8, 0x42, 0x8a, 0x2e, 0x8a, 0x19, 0xe3, 0x3e,
	0xbe, 0x3a, 0x0f, 0x6d, 0x4d, 0xfe, 0xda, 0x7c, 0x57, 0x14, 0x99, 0xc2, 0xaf, 0x4b, 0xcc, 0x35,
	0x9b, 0x91, 0xf3, 0x02, 0xef, 0x1b, 0x06, 0xd7, 0xa2, 0x9a, 0xba, 0x2b, 0xdf, 0x94, 0x33, 0xa6,
	0x70, 0xe4, 0x84, 0x75, 0xaf, 0x0d, 0x1d, 0x69, 0x46, 0x6f, 0x33, 0x41, 0x8c, 0xfc, 0x36, 0xf3,
	0x5c, 0x0c, 0x6b, 0xc6, 0xc5, 0x0c, 0x4f, 0x65, 0xe1, 0x0a, 0x5e, 0x9a, 0x45, 0x1d, 0x53, 0x97,
	0x78, 0x81, 0x80, 0x7c, 0xfd, 0xda, 0xfc, 0x78, 0x6e, 0xdb, 0x87, 0x98, 0xa3, 0xc8, 0xa4, 0xc7,
	0x30, 0x89, 0x08, 0xa6, 0xde, 0x89, 0x0f, 0x1f, 0x49, 0xf8, 0xcf, 0xa2, 0x48, 0x72, 0xb4, 0xab,
	0x13, 0x51, 0x65, 0x61, 0xee, 0x84, 0xb4, 0x43, 0x09, 0x11, 0xd8, 0x30, 0x55, 0xd6, 0xe8, 0xf7,
	0xd4, 0x48, 0x12, 0x3e, 0x92, 0xde, 0x75, 0xb0, 0x47, 0xad, 0xb9, 0x91, 0xf5, 0x50, 0x11, 0xdc,
	0x4b, 0xab, 0x7d, 0xc3, 0x50, 0x7f, 0x4b, 0x7e, 0x51, 0x9a, 0xcd, 0x88, 0x35, 0x38, 0x19, 0xbe,
	0x23, 0x30, 0x29, 0xe2, 0x90, 0x14, 0xd3, 0xa3, 0xef, 0x98, 0x49, 0x54, 0x0c, 0xbe, 0x10, 0x4f,
	0xd5, 0x24, 0x7e, 0x57, 0x26, 0x6e, 0xec, 0x98, 0x6d, 0xf9, 0x2e, 0xda, 0x03, 0x3b, 0xf3, 0x0c,
	0xbd, 0xf9, 0xbe, 0x67, 0x3e, 0x5e, 0x66, 0x48, 0x22, 0x93, 0x50, 0xe8, 0xcb, 0x76, 0xa4, 0x51,
	0xf3, 0xe6, 0x7e, 0x3f, 0x45, 0x1d, 0x0e, 0x1c, 0xc2, 0x5a, 0x7c, 0x9f, 0x51, 0x46, 0x42, 0x97,
	0x85, 0x04, 0xc3, 0xc0, 0x8c, 0xc4, 0xa3, 0x5b, 0x65, 0xbe, 0x6d, 0xe0, 0x9c, 0xd6, 0x99, 0x42,
	0x62, 0x50, 0xf0, 0xd4, 0xf1, 0x19, 0x16, 0x8e, 0xf5, 0x44, 0x3f, 0xd6, 0x9b, 0xc9, 0x6d, 0x07,
	0xa7, 0xe9, 0x66, 0x6a, 0x8a, 0xcc, 0x48, 0xdb, 0xc5, 0x94, 0x46, 0xad, 0xb0, 0xc9, 0x3c, 0xb3,
	0x72, 0x5b, 0x68, 0x5b, 0x7d, 0xa4, 0x1e, 0x61, 0x5c, 0x8f, 0x5c, 0x87, 0xd4, 0x29, 0xfc, 0x5b,
	0x16, 0xed, 0xe8, 0x16, 0xcf, 0x90, 0xff, 0x9e, 0x95, 0xc2, 0x74, 0x8e, 0x3a, 0xcd, 0xa2, 0x0d,
	0xb9, 0xd6, 0x71, 0xcb, 0xf1, 0x9a, 0xf0, 0x0f, 0x79, 0x94, 0x57, 0x13, 0x22, 0x08, 0x51, 0x0b,
	0xb7, 0x6a, 0xbc, 0x62, 0x7f, 0xcc, 0x23, 0x1b, 0x6c, 0x49, 0xab, 0xf3, 0x9c, 0x3f, 0x29, 0x15,
	0x7a, 0x9d, 0xf1, 0xe7, 0x3c, 0xda, 0x97, 0x9b, 0x1c, 0x3b, 0x14, 0xb7, 0xda, 0xb5, 0x59, 0xc4,
	0xfd, 0xc8, 0x47, 0x10, 0xac, 0x51, 0xcc, 0x3f, 0x3a, 0xf2, 0x4b, 0xf8, 0x8f, 0x10, 0x6d, 0x81,
	0x0d, 0x45, 0xd1, 0x0b, 0xea, 0x9f, 0x21, 0xda, 0x05, 0x9b, 0x8a, 0x38, 0xa3, 0xfe, 0xaf, 0x10,
	0xad, 0x81, 0x65, 0x49, 0x87, 0xff, 0x9e, 0xd5, 0xd4, 0xd5, 0xfc, 0x4f, 0x88, 0x36, 0x41, 0x8e,
	0xb6, 0x1c, 0xc2, 0x67, 0x59, 0xc8, 0xfd, 0x37, 0x14, 0x39, 0x84, 0x9a, 0x20, 0x0a, 0x51, 0xe3,
	0xf7, 0xa2, 0xff, 0x85, 0xe8, 0x3e, 0x47, 0x70, 0xb3, 0xa9, 0x59, 0x0d, 0x8f, 0xb2, 0x36, 0x39,
	0x8d, 0xb0, 0xcf, 0x3c, 0xc6, 0x01, 0xf6, 0x7f, 0x21, 0xa2, 0x36, 0xf7, 0x4d, 0x42, 0xa7, 0xf0,
	0x87, 0x4f, 0xd0, 0x9e, 0xda, 0xe1, 0xaa, 0x43, 0x7c, 0x59, 0x50, 0x0e, 0xa8, 0xbf, 0xbe, 0x8b,
	0x0a, 0x72, 0x07, 0xa7, 0xc3, 0xd1, 0xf2, 0xfc, 0x3a, 0x26, 0xf0, 0xc7, 0x57, 0x16, 0xba, 0xa7,
	0xc7, 0xff, 0x05, 0xee, 0x4f, 0xae, 0x2c, 0x74, 0x00, 0xf2, 0xf3, 0xd7, 0xa6, 0x94, 0xfd, 0xd3,
	0x2b, 0x0b, 0xbd, 0x02, 0x0e, 0x6f, 0x56, 0x36, 0xab, 0xf5, 0xa3, 0x2b, 0x0b, 0xed, 0xf3, 0xf1,
	0xa0, 0x37, 0x78, 0xf8, 0x99, 0xf2, 0x3f, 0x7f, 0x07, 0x91, 0x4c, 0x0a, 0x7f, 0x7e, 0x65, 0xa1,
	0xfb, 0xea, 0x8b, 0xfa, 0x82, 0x7d, 0xa7, 0x89, 0x09, 0x83, 0xbf, 0xb8, 0xb2, 0xd0, 0xcb, 0xe0,
	0xe0, 0x96, 0x10, 0x95, 0xd0, 0x2f, 0xaf, 0x2c, 0x04, 0xf9, 0x3d, 0x88, 0x45, 0x21, 0x39, 0xc1,
	0x3e, 0x83, 0xbf, 0x9a, 0x5a, 0x68, 0x5b, 0xae, 0x50, 0x49, 0x89, 0x78, 0x27, 0x7e, 0x3d, 0xb5,
	0xd0, 0x26, 0x5f, 0x15, 0xfc, 0xbe, 0x24, 0x05, 0x7f, 0x33, 0xb5, 0xd0, 0x8e, 0x82, 0xee, 0x8c,
	0xe4, 0xc7, 0x53, 0x51, 0x19, 0x39, 0xc5, 0x92, 0xfc, 0xd4, 0xf1, 0xf8, 0x0a, 0x11, 0xec, 0xdf,
	0x4e, 0xd3, 0xb4, 0x52, 0x2d, 0xbd, 0x06, 0x3f, 0x99, 0x5a, 0xe8, 0x10, 0xd8, 0xfa, 0x6b, 0x32,
	0x23, 0x20, 0xd6, 0x3b, 0xfc, 0xdd, 0xd4, 0x42, 0xb6, 0x1a, 0x04, 0xc5, 0x0c, 0x1a, 0x6d, 0x1f,
	0x53, 0xf8, 0xfb, 0xa9, 0x55, 0x58, 0x80, 0xd6, 0x83, 0x5d, 0xb0, 0x36, 0xf3, 0x56, 0xe4, 0x17,
	0xec, 0xa0, 0x56, 0x85, 0x56, 0x75, 0x02, 0xd6, 0xe5, 0x15, 0xfd, 0x64, 0x14, 0xc7, 0xe3, 0x78,
	0x84, 0x0a, 0x60, 0x31, 0x89, 0xf9, 0x15, 0x5c, 0xbd, 0x09, 0x0a, 0xfa, 0x47, 0xe9, 0x0e, 0x6a,
	0x82, 0xbb, 0x17, 0xe6, 0x2d, 0x22, 0x9e, 0x22, 0xa8, 0x50, 0xb9, 0xf5, 0xf1, 0x57, 0xd8, 0xaf,
	0xdc, 0xfe, 0x98, 0x2b, 0xdd, 0xa9, 0x3d, 0x06, 0xbb, 0x67, 0xc3, 0x41, 0x25, 0x49, 0x2a, 0x9d,
	0xf3, 0xee, 0x68, 0xd8, 0xeb, 0x56, 0xfa, 0x9d, 0xd1, 0xf3, 0xca, 0xc5, 0xb3, 0x77, 0xbe, 0xf8,
	0x7e, 0x6f, 0x5c, 0x79, 0x36, 0x19, 0xc7, 0xdd, 0xca, 0x70, 0xf4, 0xfe, 0x51, 0x1c, 0x1f, 0x71,
	0xce, 0x51, 0x6f, 0xf0, 0x9a, 0x78, 0x2a, 0x3f, 0xbb, 0x7c, 0xef, 0x48, 0xbd, 0x9d, 0xf5, 0xff,
	0x4f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x40, 0x2a, 0xb2, 0xff, 0x4d, 0x0f, 0x00, 0x00,
}
