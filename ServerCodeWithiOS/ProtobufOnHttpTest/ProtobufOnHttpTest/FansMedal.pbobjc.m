// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fansMedal.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "FansMedal.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - FansMedalRoot

@implementation FansMedalRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - FansMedalRoot_FileDescriptor

static GPBFileDescriptor *FansMedalRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RoomInfo

@implementation RoomInfo

@dynamic roomId;
@dynamic startTime;
@dynamic endTime;
@dynamic md5;
@dynamic zipURL;
@dynamic sIdArray, sIdArray_Count;

typedef struct RoomInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *roomId;
  NSString *md5;
  NSString *zipURL;
  NSMutableArray *sIdArray;
  uint64_t startTime;
  uint64_t endTime;
} RoomInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = RoomInfo_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomInfo__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = RoomInfo_FieldNumber_StartTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomInfo__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = RoomInfo_FieldNumber_EndTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RoomInfo__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "md5",
        .dataTypeSpecific.className = NULL,
        .number = RoomInfo_FieldNumber_Md5,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RoomInfo__storage_, md5),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "zipURL",
        .dataTypeSpecific.className = NULL,
        .number = RoomInfo_FieldNumber_ZipURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RoomInfo__storage_, zipURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sIdArray",
        .dataTypeSpecific.className = NULL,
        .number = RoomInfo_FieldNumber_SIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RoomInfo__storage_, sIdArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomInfo class]
                                     rootClass:[FansMedalRoot class]
                                          file:FansMedalRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005\004!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FansMedal

@implementation FansMedal

@dynamic roomsArray, roomsArray_Count;

typedef struct FansMedal__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *roomsArray;
} FansMedal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RoomInfo),
        .number = FansMedal_FieldNumber_RoomsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FansMedal__storage_, roomsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FansMedal class]
                                     rootClass:[FansMedalRoot class]
                                          file:FansMedalRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FansMedal__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
